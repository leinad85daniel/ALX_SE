[---STANDARD OUTPUT---]

- Most command line programs that display their results do so by sending their results to a facility called standard output. By default, standard output directs its contents to display.

- To redirect standard output to a file, the ">" character is used like this: ls > file_list.txt  --> In this example, the ls command is executed and the results are written in a file named file_list.txt. Since the outpu of ls was redirected to the file, no rsults appear on the display.

- Each time the command above is repeated, file_list.txt is overwritten from the beginning with the output of the command ls. To have new results appended to the file instead, we use ">>" like this: ls >> file_list.txt

- When the results are appended, the new results are added to the end of the file, thus making the file longer each time the command is repeated. If the file does not exist when we attemp to append the redirected output, the file will be created.

[---STANDARD INPUT---]

- Many commands can accept input from a facility called standard input. By default, standard input gets its contents from the keyboard, but like standard output, it can be redirected. 

- To redirect standard input from a file instead of the keyboard, the "<" character is used like this: sort < file_list.txt > sorted_file.txt --> As we can see, a command can have both its input and output redirected. Be aware that the order of the redirection does not matter. The only requirement is that the redirection operators (the "<" and ">") must appear after the other options and arguments in the command.

[---PIPELINES---]

- The most useful and powerful thing we can do with I/O redirection is to connect multiple commands together to form what are called pipelines. 

- With pipelines, the standard output of one command is fed into the standard input of another. Here is a very useful example: ls -l | less --> In this example, the output of the ls command is fed into less. By using this "| less" trick, we can make any command have scrolling output.

- By connecting commands together, we can accomplish amazing facts. Here are some examples to try:

--> ls -lt | head...................:-> Displays the 10 newest files in the current directory
--> du | sort -nr...................:-> Displays a list of directories and how much space thay consume, sorted from the largest to the smallest.
--> find . -type f -print | wc -l...:-> Displays the total number of files in the current working directory and all of its subdirectories.

[---FILTERS---]

- One kind of program frequently used in pipelines is called filter. 

- Filters take standard input and perform an operation upon it and send the results to standard output. In this way, they can be combined to process information in powerful ways. Here are some of the common programs that can act as filters:

--> sort :-> Sorts standard input then outputs the sorted result on standard output.
  - http://linuxcommand.org/lc3_man_pages/sort1.html
--> uniq :-> Given a sorted stream of data from standard input, it removes duplicate lines of data (i.e., it make sure that every line is unique).
  - http://linuxcommand.org/lc3_man_pages/uniq1.html
--> grep :-> Examines each line of data it recieves from standard inputs and outputs every line that contains a specified pattern of characters. 
  - http://linuxcommand.org/lc3_man_pages/grep1.html
--> head :-> Outputs the first few lines of its input. Useful for getting the header of a file.
  - http://linuxcommand.org/lc3_man_pages/head1.html
--> tail :-> Outputs the last few lines of its input. Useful for things like getting the most recent entries fromm a log file.
  - http://linuxcommand.org/lc3_man_pages/tail1.html
--> tr :-> Translated characters. Can be used to perform tasks such as upper/lowercase conversions or changing line termination characters from one type to another (for example, converting DOS text file into Unix style text files)
  - http://linuxcommand.org/lc3_man_pages/tr1.html


