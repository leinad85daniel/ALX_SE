[---WILDCARDS---]

-Wildcards allow you to select filenames based on patterns of characters.

--> *.............:->Matches any characters
--> ?.............:->Matches any single character
--> [characters]..:->Matches any character that is a member of the set characters. The set of characters may also be expressed as POSIX character class such as one of the following:
                 -->[:alnum:]...:->Alphanumeric characters
                 -->[:alpha:]...:->Alphabetic characters
                 -->[:digit:]...:->Numerals
                 -->[:upper:]...:->Uppercase alphabetic characters
                 -->[:lower:]...:->Lowercase alphabetic characters
--> [!characters]................:->Matches any character that is not a member of the set characters

- Using wildcards, it is possible to construct very sophisticated selection criteria for filenames. Here are some examples of patterns and what they match:

--> *.............................:->All filenames
--> g*............................:->All file names that begin with the character "g"
--> b*.txt........................:->All files that begin with the character "b" and end with the characters ".txt"
--> Data??........................:->Any filename that begins with the characters "Data" followed by exactly 3 more characters
--> [abc]*........................:->Any file name that begins with "a" or "b" or "c" followed by any other chaarcters
--> [[:upper:]]*..................:->Any file name tha begins with an uppercase.
--> BACKUP.[[:digit:]][[:digit:]].:->Matches any filename that begins with the characters "BACKUP." followed by exactly two numerals.
--> *[![:lower:]].................:->Any file name that does not end with a lowercase letter.

- We can use wildcards with any command that accepts filename arguments.

[---CP---]

- The cp program copies files and directories. In its simplest formm it copies a single file: cp file1 file2

- It can also be used to copy multiple files to a different directory: cp file... directory 

# ... :->Signifies that an item can be repeated one or more times.

--> cp -i file1 file2...:-> -i is interactive option to specify if file2 exists, the user is prompted before it is overwritten with the contents of file1.
--> cp -R dir1 dir2.....:-> copy the contents of the directory dir1. If directory dir2 does not exst, it is created. Otherwise, it creates a directory named dir1 within directory dir2.

[---MV---]

- The mv command moves or rename files and directories depending on how it is used. It will either move one or more files to a different directory, or it will rename a file or a directory. To rename a file, it is used like this: mv file1 file2

- To move files to a directory, it is used as: mv file... dir

--> mv file1 file2 dir1...:-> The files file1 and file2 are moved to directory dir1. If dir1 does not exist, MV will exit with an error.
--> mv dir1 dir2..........:-> If dir2 does not exist, then dir1 is renamed dir2. If dir2 exists, the directory dir1 is moved within directory dir2.

[---RM---]

- The rm command removes (deletes) files and directories: rm file...

- Using the recursive option (-r), rm can also be used to delete directories: rm -r dir...

# Linux does not have an undelete command. Once you delete something with rm, it's gone.

[---MKDIR---]

- The mkdir command is used to create directories. To use it, you simply type: mkdir dir...

[---USING COMMANDS WITH WILDCARDS---]

--> cp *.txt txt_files :-> Copy all files in the current working directory with names ending with the characters ".txt" to an existing directory named text_files.
--> mv dir1 ../*.bak dir2 :-> Move the subdirectory dir1 and all the files ending in .bak in the current working directory's parent directory to an existing directory named dir2.
--> rm *~ :--> Delete all files in the current working directory that end with the character "~". Some applications create backup files using this naming scheme.


